// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  phone     String?
  address   String?
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  reviews   Review[]
  favorites MenuItem[]

  @@map("users")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  image       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  menuItems MenuItem[]

  @@map("categories")
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  image       String?
  isAvailable Boolean  @default(true)
  isPopular   Boolean  @default(false)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category     Category     @relation(fields: [categoryId], references: [id])
  orderItems   OrderItem[]
  favorites    User[]
  reviews      Review[]

  @@map("menu_items")
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  status        OrderStatus @default(PENDING)
  totalAmount   Decimal     @db.Decimal(10, 2)
  deliveryFee   Decimal     @db.Decimal(10, 2) @default(0)
  deliveryAddress String
  deliveryInstructions String?
  estimatedDeliveryTime DateTime?
  actualDeliveryTime   DateTime?
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)
  notes      String?

  // Relations
  order    Order    @relation(fields: [orderId], references: [id])
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  menuItemId String
  orderId    String?
  rating     Int      @db.Integer
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id])
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("reviews")
}

model DeliveryZone {
  id          String   @id @default(cuid())
  name        String
  deliveryFee Decimal  @db.Decimal(10, 2)
  minOrderAmount Decimal @db.Decimal(10, 2)
  estimatedDeliveryTime Int // in minutes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("delivery_zones")
}

enum Role {
  ADMIN
  CUSTOMER
  DELIVERY_PERSON
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_DELIVERY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_MONEY
} 